//---------------------------------------------------------------------
// <autogenerated>
//
//     Generated by Message Compiler (mc.exe)
//
//     Copyright (c) Microsoft Corporation. All Rights Reserved.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//---------------------------------------------------------------------




namespace Microsoft.Hpc.Excel.Internal
{
using System;
using System.Collections.Generic;
using System.Text;
using System.Diagnostics;
using System.Diagnostics.Eventing;
using Microsoft.Win32;
using System.Runtime.InteropServices;
using System.Security.Principal;

    public class HPCExcelEventProvider : IDisposable
    {
        //
        // Provider Microsoft-HPC-Excel Event Count 86
        //

        internal EventProviderVersionTwo m_provider = new EventProviderVersionTwo(new Guid("f194da4c-e627-4d6c-82cf-8e91ab00db27"));
        //
        // Task :  eventGUIDs
        //

        //
        // Event Descriptors
        //
        protected EventDescriptor XllConnector_WriteDebugTextCritical;
        protected EventDescriptor XllConnector_WriteDebugTextError;
        protected EventDescriptor XllConnector_WriteDebugTextWarning;
        protected EventDescriptor XllConnector_WriteDebugTextInfo;
        protected EventDescriptor XllConnector_WriteDebugTextVerbose;
        protected EventDescriptor XllContainer_WriteDebugTextCritical;
        protected EventDescriptor XllContainer_WriteDebugTextError;
        protected EventDescriptor XllContainer_WriteDebugTextWarning;
        protected EventDescriptor XllContainer_WriteDebugTextInfo;
        protected EventDescriptor XllContainer_WriteDebugTextVerbose;
        protected EventDescriptor XllConnector_Batch_CreateBrokerClientException;
        protected EventDescriptor XllConnector_Critical_SendTimeoutException;
        protected EventDescriptor XllConnector_Batch_SendCommunicationException;
        protected EventDescriptor XllConnector_Batch_SendException;
        protected EventDescriptor XllConnector_Batch_EndRequestsFailure;
        protected EventDescriptor XllConnector_Batch_CallbackNoUserDataException;
        protected EventDescriptor XllConnector_Batch_BrokerUnavailable;
        protected EventDescriptor XllConnector_Batch_CallbackSessionExceptionBrokerNodeUnavailable;
        protected EventDescriptor XllConnector_Batch_CallbackSessionExceptionOtherCause;
        protected EventDescriptor XllConnector_Batch_CallbackException;
        protected EventDescriptor XllConnector_Batch_CallbackQueueError;
        protected EventDescriptor XllConnector_Batch_ProcessClearResponsesError;
        protected EventDescriptor XllConnector_Batch_ProcessSetResponseError;
        protected EventDescriptor XllConnector_Batch_ProcessSetResponseCancelError;
        protected EventDescriptor XllConnector_Batch_CloseError;
        protected EventDescriptor XllConnector_Config_HeadNodeError;
        protected EventDescriptor XllConnector_Config_JobTemplateError;
        protected EventDescriptor XllConnector_Config_StatusWindowSettingError;
        protected EventDescriptor XllConnector_Config_SetHeadNodeError;
        protected EventDescriptor XllConnector_Config_SetJobTemplateError;
        protected EventDescriptor XllConnector_Config_EnableStatusWindowError;
        protected EventDescriptor XllConnector_Config_SaveWorkbookSettingsError;
        protected EventDescriptor XllConnector_Config_SetHeadNodeCallError;
        protected EventDescriptor XllConnector_Config_SetJobTemplateCallError;
        protected EventDescriptor XllConnector_Config_UseWorkbookSettingsError;
        protected EventDescriptor XllConnector_Config_IsUsingWorkbookSettingsError;
        protected EventDescriptor XllConnector_Config_SaveWorkbookSettingsCallError;
        protected EventDescriptor XllConnector_HpcConnector_CallUdfFailure;
        protected EventDescriptor XllConnector_HpcConnector_ComOnConnectionFailure;
        protected EventDescriptor XllConnector_HpcConnector_ComOnDisconnectionFailure;
        protected EventDescriptor XllConnector_Request_SetReturnError;
        protected EventDescriptor XllConnector_Session_CloseSessionError;
        protected EventDescriptor XllConnector_Critical_OpenSessionError;
        protected EventDescriptor XllConnector_Session_SendingThreadFailure;
        protected EventDescriptor XllConnector_Session_CloseSessionCallError;
        protected EventDescriptor XllConnector_Session_RetryBatchesError;
        protected EventDescriptor XllConnector_Session_BatchUdfRequestFailure;
        protected EventDescriptor XllConnector_Session_BatchRetryFailure;
        protected EventDescriptor XllConnector_Session_CancelFailure;
        protected EventDescriptor XllContainer_Container_ServiceConfigError;
        protected EventDescriptor XllContainer_Container_UdfCallFailed;
        protected EventDescriptor XllContainer_Container_AutoOpenFailed;
        protected EventDescriptor XllContainer_Critical_LoadFailed;
        protected EventDescriptor XllContainer_Critical_LoadFailedOnAzure;
        protected EventDescriptor XllContainer_Critical_CppPackageRootIsMissing;
        protected EventDescriptor ExcelDriver_WriteDebugTextCritical;
        protected EventDescriptor ExcelDriver_WriteDebugTextError;
        protected EventDescriptor ExcelDriver_WriteDebugTextWarning;
        protected EventDescriptor ExcelDriver_WriteDebugTextInfo;
        protected EventDescriptor ExcelDriver_WriteDebugTextVerbose;
        protected EventDescriptor ExcelService_WriteDebugTextCritical;
        protected EventDescriptor ExcelService_WriteDebugTextError;
        protected EventDescriptor ExcelService_WriteDebugTextWarning;
        protected EventDescriptor ExcelService_WriteDebugTextInfo;
        protected EventDescriptor ExcelService_WriteDebugTextVerbose;
        protected EventDescriptor ExcelClient_WriteDebugTextCritical;
        protected EventDescriptor ExcelClient_WriteDebugTextError;
        protected EventDescriptor ExcelClient_WriteDebugTextWarning;
        protected EventDescriptor ExcelClient_WriteDebugTextInfo;
        protected EventDescriptor ExcelClient_WriteDebugTextVerbose;
        protected EventDescriptor ExcelDriver_OpenWorkbookFailed;
        protected EventDescriptor ExcelDriver_StartProcessFailed;
        protected EventDescriptor ExcelDriver_MacroFailed;
        protected EventDescriptor ExcelDriver_WorkbookDNE;
        protected EventDescriptor ExcelDriver_WorkbookVersionMismatch;
        protected EventDescriptor ExcelDriver_BlockingPopup;
        protected EventDescriptor ExcelService_SystemicFailure;
        protected EventDescriptor ExcelClient_OpenSessionError;
        protected EventDescriptor ExcelClient_CloseSessionError;
        protected EventDescriptor ExcelClient_FatalResponse;
        protected EventDescriptor ExcelClient_RunError;
        protected EventDescriptor ExcelService_ApplicationError;
        protected EventDescriptor ExcelClient_CancelError;
        protected EventDescriptor XllConnector_Critical_NotComAddin;
        protected EventDescriptor XllConnector_Critical_TypeLoadError;
        protected EventDescriptor XllConnector_Batch_CallbackSessionExceptionInitializeFailed;

        protected virtual void Dispose(bool disposing)
        {
            if (disposing)
            {
                m_provider.Dispose();
            }
        }

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }


        public HPCExcelEventProvider()
        {
            unchecked
            {
                XllConnector_WriteDebugTextCritical = new EventDescriptor(0x3e9, 0x0, 0x12, 0x2, 0x0, 0x1, (long)0x2000000000000000);
                XllConnector_WriteDebugTextError = new EventDescriptor(0x3ea, 0x0, 0x12, 0x2, 0x0, 0x1, (long)0x2000000000000000);
                XllConnector_WriteDebugTextWarning = new EventDescriptor(0x3eb, 0x0, 0x12, 0x3, 0x0, 0x1, (long)0x2000000000000000);
                XllConnector_WriteDebugTextInfo = new EventDescriptor(0x3ec, 0x0, 0x12, 0x4, 0x0, 0x1, (long)0x2000000000000000);
                XllConnector_WriteDebugTextVerbose = new EventDescriptor(0x3ed, 0x0, 0x12, 0x5, 0x0, 0x1, (long)0x2000000000000000);
                XllContainer_WriteDebugTextCritical = new EventDescriptor(0x3f3, 0x0, 0x12, 0x2, 0x0, 0x2, (long)0x2000000000000000);
                XllContainer_WriteDebugTextError = new EventDescriptor(0x3f4, 0x0, 0x12, 0x2, 0x0, 0x2, (long)0x2000000000000000);
                XllContainer_WriteDebugTextWarning = new EventDescriptor(0x3f5, 0x0, 0x12, 0x3, 0x0, 0x2, (long)0x2000000000000000);
                XllContainer_WriteDebugTextInfo = new EventDescriptor(0x3f6, 0x0, 0x12, 0x4, 0x0, 0x2, (long)0x2000000000000000);
                XllContainer_WriteDebugTextVerbose = new EventDescriptor(0x3f7, 0x0, 0x12, 0x5, 0x0, 0x2, (long)0x2000000000000000);
                XllConnector_Batch_CreateBrokerClientException = new EventDescriptor(0x44c, 0x0, 0x11, 0x3, 0xe, 0x1, (long)0x4000000000000000);
                XllConnector_Critical_SendTimeoutException = new EventDescriptor(0x44d, 0x0, 0x10, 0x1, 0xe, 0x1, (long)0x8000000000000000);
                XllConnector_Batch_SendCommunicationException = new EventDescriptor(0x44e, 0x0, 0x11, 0x3, 0xb, 0x1, (long)0x4000000000000000);
                XllConnector_Batch_SendException = new EventDescriptor(0x44f, 0x0, 0x11, 0x3, 0xe, 0x1, (long)0x4000000000000000);
                XllConnector_Batch_EndRequestsFailure = new EventDescriptor(0x450, 0x0, 0x11, 0x3, 0xe, 0x1, (long)0x4000000000000000);
                XllConnector_Batch_CallbackNoUserDataException = new EventDescriptor(0x451, 0x0, 0x11, 0x3, 0xb, 0x1, (long)0x4000000000000000);
                XllConnector_Batch_BrokerUnavailable = new EventDescriptor(0x452, 0x0, 0x11, 0x2, 0xb, 0x1, (long)0x4000000000000000);
                XllConnector_Batch_CallbackSessionExceptionBrokerNodeUnavailable = new EventDescriptor(0x453, 0x0, 0x11, 0x3, 0xb, 0x1, (long)0x4000000000000000);
                XllConnector_Batch_CallbackSessionExceptionOtherCause = new EventDescriptor(0x454, 0x0, 0x11, 0x3, 0x0, 0x1, (long)0x4000000000000000);
                XllConnector_Batch_CallbackException = new EventDescriptor(0x455, 0x0, 0x11, 0x3, 0x0, 0x1, (long)0x4000000000000000);
                XllConnector_Batch_CallbackQueueError = new EventDescriptor(0x456, 0x0, 0x11, 0x2, 0x0, 0x1, (long)0x4000000000000000);
                XllConnector_Batch_ProcessClearResponsesError = new EventDescriptor(0x457, 0x0, 0x11, 0x2, 0x0, 0x1, (long)0x4000000000000000);
                XllConnector_Batch_ProcessSetResponseError = new EventDescriptor(0x458, 0x0, 0x11, 0x2, 0xf, 0x1, (long)0x4000000000000000);
                XllConnector_Batch_ProcessSetResponseCancelError = new EventDescriptor(0x459, 0x0, 0x11, 0x2, 0xf, 0x1, (long)0x4000000000000000);
                XllConnector_Batch_CloseError = new EventDescriptor(0x45b, 0x0, 0x11, 0x3, 0xe, 0x1, (long)0x4000000000000000);
                XllConnector_Config_HeadNodeError = new EventDescriptor(0x4b0, 0x0, 0x11, 0x2, 0x10, 0x1, (long)0x4000000000000000);
                XllConnector_Config_JobTemplateError = new EventDescriptor(0x4b1, 0x0, 0x11, 0x2, 0x10, 0x1, (long)0x4000000000000000);
                XllConnector_Config_StatusWindowSettingError = new EventDescriptor(0x4b2, 0x0, 0x11, 0x2, 0x10, 0x1, (long)0x4000000000000000);
                XllConnector_Config_SetHeadNodeError = new EventDescriptor(0x4b3, 0x0, 0x11, 0x2, 0x10, 0x1, (long)0x4000000000000000);
                XllConnector_Config_SetJobTemplateError = new EventDescriptor(0x4b4, 0x0, 0x11, 0x2, 0x10, 0x1, (long)0x4000000000000000);
                XllConnector_Config_EnableStatusWindowError = new EventDescriptor(0x4b5, 0x0, 0x11, 0x2, 0x10, 0x1, (long)0x4000000000000000);
                XllConnector_Config_SaveWorkbookSettingsError = new EventDescriptor(0x4b6, 0x0, 0x11, 0x2, 0x10, 0x1, (long)0x4000000000000000);
                XllConnector_Config_SetHeadNodeCallError = new EventDescriptor(0x4b7, 0x0, 0x11, 0x2, 0x10, 0x1, (long)0x4000000000000000);
                XllConnector_Config_SetJobTemplateCallError = new EventDescriptor(0x4b8, 0x0, 0x11, 0x2, 0x10, 0x1, (long)0x4000000000000000);
                XllConnector_Config_UseWorkbookSettingsError = new EventDescriptor(0x4b9, 0x0, 0x11, 0x2, 0x10, 0x1, (long)0x4000000000000000);
                XllConnector_Config_IsUsingWorkbookSettingsError = new EventDescriptor(0x4ba, 0x0, 0x11, 0x2, 0x10, 0x1, (long)0x4000000000000000);
                XllConnector_Config_SaveWorkbookSettingsCallError = new EventDescriptor(0x4bb, 0x0, 0x11, 0x2, 0x10, 0x1, (long)0x4000000000000000);
                XllConnector_HpcConnector_CallUdfFailure = new EventDescriptor(0x514, 0x0, 0x11, 0x2, 0xf, 0x1, (long)0x4000000000000000);
                XllConnector_HpcConnector_ComOnConnectionFailure = new EventDescriptor(0x515, 0x0, 0x11, 0x2, 0xf, 0x1, (long)0x4000000000000000);
                XllConnector_HpcConnector_ComOnDisconnectionFailure = new EventDescriptor(0x516, 0x0, 0x11, 0x2, 0xf, 0x1, (long)0x4000000000000000);
                XllConnector_Request_SetReturnError = new EventDescriptor(0x41e, 0x0, 0x11, 0x2, 0xf, 0x1, (long)0x4000000000000000);
                XllConnector_Session_CloseSessionError = new EventDescriptor(0x578, 0x0, 0x11, 0x2, 0xb, 0x1, (long)0x4000000000000000);
                XllConnector_Critical_OpenSessionError = new EventDescriptor(0x579, 0x0, 0x10, 0x1, 0xa, 0x1, (long)0x8000000000000000);
                XllConnector_Session_SendingThreadFailure = new EventDescriptor(0x57b, 0x0, 0x11, 0x2, 0xb, 0x1, (long)0x4000000000000000);
                XllConnector_Session_CloseSessionCallError = new EventDescriptor(0x57c, 0x0, 0x11, 0x2, 0xb, 0x1, (long)0x4000000000000000);
                XllConnector_Session_RetryBatchesError = new EventDescriptor(0x57d, 0x0, 0x11, 0x2, 0xb, 0x1, (long)0x4000000000000000);
                XllConnector_Session_BatchUdfRequestFailure = new EventDescriptor(0x57e, 0x0, 0x11, 0x2, 0x0, 0x1, (long)0x4000000000000000);
                XllConnector_Session_BatchRetryFailure = new EventDescriptor(0x57f, 0x0, 0x11, 0x2, 0x0, 0x1, (long)0x4000000000000000);
                XllConnector_Session_CancelFailure = new EventDescriptor(0x580, 0x0, 0x11, 0x2, 0xb, 0x1, (long)0x4000000000000000);
                XllContainer_Container_ServiceConfigError = new EventDescriptor(0x7d1, 0x0, 0x11, 0x2, 0x0, 0x2, (long)0x4000000000000000);
                XllContainer_Container_UdfCallFailed = new EventDescriptor(0x7d3, 0x0, 0x12, 0x5, 0x0, 0x2, (long)0x2000000000000000);
                XllContainer_Container_AutoOpenFailed = new EventDescriptor(0x7d7, 0x0, 0x11, 0x2, 0x0, 0x2, (long)0x4000000000000000);
                XllContainer_Critical_LoadFailed = new EventDescriptor(0x7d8, 0x0, 0x10, 0x1, 0x0, 0x2, (long)0x8000000000000000);
                XllContainer_Critical_LoadFailedOnAzure = new EventDescriptor(0x7d9, 0x0, 0x10, 0x1, 0x0, 0x2, (long)0x8000000000000000);
                XllContainer_Critical_CppPackageRootIsMissing = new EventDescriptor(0x7da, 0x0, 0x10, 0x1, 0x0, 0x2, (long)0x8000000000000000);
                ExcelDriver_WriteDebugTextCritical = new EventDescriptor(0xbb9, 0x0, 0x12, 0x1, 0x12, 0x3, (long)0x2000000000000000);
                ExcelDriver_WriteDebugTextError = new EventDescriptor(0xbba, 0x0, 0x12, 0x2, 0x12, 0x3, (long)0x2000000000000000);
                ExcelDriver_WriteDebugTextWarning = new EventDescriptor(0xbbb, 0x0, 0x12, 0x3, 0x12, 0x3, (long)0x2000000000000000);
                ExcelDriver_WriteDebugTextInfo = new EventDescriptor(0xbbc, 0x0, 0x12, 0x4, 0x12, 0x3, (long)0x2000000000000000);
                ExcelDriver_WriteDebugTextVerbose = new EventDescriptor(0xbbd, 0x0, 0x12, 0x5, 0x12, 0x3, (long)0x2000000000000000);
                ExcelService_WriteDebugTextCritical = new EventDescriptor(0xfa1, 0x0, 0x12, 0x1, 0x12, 0x4, (long)0x2000000000000000);
                ExcelService_WriteDebugTextError = new EventDescriptor(0xfa2, 0x0, 0x12, 0x2, 0x12, 0x4, (long)0x2000000000000000);
                ExcelService_WriteDebugTextWarning = new EventDescriptor(0xfa3, 0x0, 0x12, 0x3, 0x12, 0x4, (long)0x2000000000000000);
                ExcelService_WriteDebugTextInfo = new EventDescriptor(0xfa4, 0x0, 0x12, 0x4, 0x12, 0x4, (long)0x2000000000000000);
                ExcelService_WriteDebugTextVerbose = new EventDescriptor(0xfa5, 0x0, 0x12, 0x5, 0x12, 0x3, (long)0x2000000000000000);
                ExcelClient_WriteDebugTextCritical = new EventDescriptor(0x1389, 0x0, 0x12, 0x1, 0x12, 0x5, (long)0x2000000000000000);
                ExcelClient_WriteDebugTextError = new EventDescriptor(0x138a, 0x0, 0x12, 0x2, 0x12, 0x5, (long)0x2000000000000000);
                ExcelClient_WriteDebugTextWarning = new EventDescriptor(0x138b, 0x0, 0x12, 0x3, 0x12, 0x5, (long)0x2000000000000000);
                ExcelClient_WriteDebugTextInfo = new EventDescriptor(0x138c, 0x0, 0x12, 0x4, 0x12, 0x5, (long)0x2000000000000000);
                ExcelClient_WriteDebugTextVerbose = new EventDescriptor(0x138d, 0x0, 0x12, 0x5, 0x12, 0x5, (long)0x2000000000000000);
                ExcelDriver_OpenWorkbookFailed = new EventDescriptor(0xc1d, 0x0, 0x11, 0x2, 0x1e, 0x3, (long)0x4000000000000000);
                ExcelDriver_StartProcessFailed = new EventDescriptor(0xc1e, 0x0, 0x10, 0x1, 0x1e, 0x3, (long)0x8000000000000000);
                ExcelDriver_MacroFailed = new EventDescriptor(0xc1f, 0x0, 0x11, 0x3, 0x1f, 0x3, (long)0x4000000000000000);
                ExcelDriver_WorkbookDNE = new EventDescriptor(0xc20, 0x0, 0x11, 0x2, 0x1e, 0x3, (long)0x4000000000000000);
                ExcelDriver_WorkbookVersionMismatch = new EventDescriptor(0xc21, 0x0, 0x11, 0x2, 0x1e, 0x3, (long)0x4000000000000000);
                ExcelDriver_BlockingPopup = new EventDescriptor(0xc22, 0x0, 0x11, 0x3, 0x20, 0x3, (long)0x4000000000000000);
                ExcelService_SystemicFailure = new EventDescriptor(0x1005, 0x0, 0x10, 0x2, 0x28, 0x4, (long)0x8000000000000000);
                ExcelClient_OpenSessionError = new EventDescriptor(0x13ed, 0x0, 0x11, 0x2, 0xa, 0x5, (long)0x4000000000000000);
                ExcelClient_CloseSessionError = new EventDescriptor(0x13ee, 0x0, 0x11, 0x2, 0xb, 0x5, (long)0x4000000000000000);
                ExcelClient_FatalResponse = new EventDescriptor(0x13ef, 0x0, 0x11, 0x2, 0x32, 0x5, (long)0x4000000000000000);
                ExcelClient_RunError = new EventDescriptor(0x13f0, 0x0, 0x11, 0x2, 0x33, 0x5, (long)0x4000000000000000);
                ExcelService_ApplicationError = new EventDescriptor(0x1006, 0x0, 0x11, 0x2, 0x28, 0x4, (long)0x4000000000000000);
                ExcelClient_CancelError = new EventDescriptor(0x13f1, 0x0, 0x11, 0x2, 0x34, 0x5, (long)0x4000000000000000);
                XllConnector_Critical_NotComAddin = new EventDescriptor(0x517, 0x0, 0x10, 0x1, 0xa, 0x1, (long)0x8000000000000000);
                XllConnector_Critical_TypeLoadError = new EventDescriptor(0x4bc, 0x0, 0x10, 0x1, 0x10, 0x1, (long)0x8000000000000000);
                XllConnector_Batch_CallbackSessionExceptionInitializeFailed = new EventDescriptor(0x45c, 0x0, 0x11, 0x3, 0xc, 0x1, (long)0x4000000000000000);
            }
        }


        //
        // Event method for XllConnector_WriteDebugTextCritical
        //
        public bool LogXllConnector_WriteDebugTextCritical(string message)
        {

            return m_provider.WriteEvent(ref XllConnector_WriteDebugTextCritical, message);

        }

        //
        // Event method for XllConnector_WriteDebugTextError
        //
        public bool LogXllConnector_WriteDebugTextError(string message)
        {

            return m_provider.WriteEvent(ref XllConnector_WriteDebugTextError, message);

        }

        //
        // Event method for XllConnector_WriteDebugTextWarning
        //
        public bool LogXllConnector_WriteDebugTextWarning(string message)
        {

            return m_provider.WriteEvent(ref XllConnector_WriteDebugTextWarning, message);

        }

        //
        // Event method for XllConnector_WriteDebugTextInfo
        //
        public bool LogXllConnector_WriteDebugTextInfo(string message)
        {

            return m_provider.WriteEvent(ref XllConnector_WriteDebugTextInfo, message);

        }

        //
        // Event method for XllConnector_WriteDebugTextVerbose
        //
        public bool LogXllConnector_WriteDebugTextVerbose(string message)
        {

            return m_provider.WriteEvent(ref XllConnector_WriteDebugTextVerbose, message);

        }

        //
        // Event method for XllContainer_WriteDebugTextCritical
        //
        public bool LogXllContainer_WriteDebugTextCritical(string message)
        {

            return m_provider.WriteEvent(ref XllContainer_WriteDebugTextCritical, message);

        }

        //
        // Event method for XllContainer_WriteDebugTextError
        //
        public bool LogXllContainer_WriteDebugTextError(string message)
        {

            return m_provider.WriteEvent(ref XllContainer_WriteDebugTextError, message);

        }

        //
        // Event method for XllContainer_WriteDebugTextWarning
        //
        public bool LogXllContainer_WriteDebugTextWarning(string message)
        {

            return m_provider.WriteEvent(ref XllContainer_WriteDebugTextWarning, message);

        }

        //
        // Event method for XllContainer_WriteDebugTextInfo
        //
        public bool LogXllContainer_WriteDebugTextInfo(string message)
        {

            return m_provider.WriteEvent(ref XllContainer_WriteDebugTextInfo, message);

        }

        //
        // Event method for XllContainer_WriteDebugTextVerbose
        //
        public bool LogXllContainer_WriteDebugTextVerbose(string message)
        {

            return m_provider.WriteEvent(ref XllContainer_WriteDebugTextVerbose, message);

        }

        //
        // Event method for XllConnector_Batch_CreateBrokerClientException
        //
        public bool LogXllConnector_Batch_CreateBrokerClientException(string message, int sessionID, int clientID)
        {

            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateGenericExceptionWithBrokerClient(ref XllConnector_Batch_CreateBrokerClientException, message, sessionID, clientID);
        }

        //
        // Event method for XllConnector_Critical_SendTimeoutException
        //
        public bool LogXllConnector_Critical_SendTimeoutException(string message, int sessionID, int clientID)
        {

            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateGenericExceptionWithBrokerClient(ref XllConnector_Critical_SendTimeoutException, message, sessionID, clientID);
        }

        //
        // Event method for XllConnector_Batch_SendCommunicationException
        //
        public bool LogXllConnector_Batch_SendCommunicationException(string message, int sessionID, int clientID)
        {

            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateGenericExceptionWithBrokerClient(ref XllConnector_Batch_SendCommunicationException, message, sessionID, clientID);
        }

        //
        // Event method for XllConnector_Batch_SendException
        //
        public bool LogXllConnector_Batch_SendException(string message, int sessionID, int clientID)
        {

            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateGenericExceptionWithBrokerClient(ref XllConnector_Batch_SendException, message, sessionID, clientID);
        }

        //
        // Event method for XllConnector_Batch_EndRequestsFailure
        //
        public bool LogXllConnector_Batch_EndRequestsFailure(string message, int sessionID, int clientID)
        {

            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateGenericExceptionWithBrokerClient(ref XllConnector_Batch_EndRequestsFailure, message, sessionID, clientID);
        }

        //
        // Event method for XllConnector_Batch_CallbackNoUserDataException
        //
        public bool LogXllConnector_Batch_CallbackNoUserDataException(string message, int sessionID, int clientID)
        {

            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateGenericExceptionWithBrokerClient(ref XllConnector_Batch_CallbackNoUserDataException, message, sessionID, clientID);
        }

        //
        // Event method for XllConnector_Batch_BrokerUnavailable
        //
        public bool LogXllConnector_Batch_BrokerUnavailable(string message, int sessionID, int clientID)
        {

            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateGenericExceptionWithBrokerClient(ref XllConnector_Batch_BrokerUnavailable, message, sessionID, clientID);
        }

        //
        // Event method for XllConnector_Batch_CallbackSessionExceptionBrokerNodeUnavailable
        //
        public bool LogXllConnector_Batch_CallbackSessionExceptionBrokerNodeUnavailable(string message, int sessionID, int clientID)
        {

            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateGenericExceptionWithBrokerClient(ref XllConnector_Batch_CallbackSessionExceptionBrokerNodeUnavailable, message, sessionID, clientID);
        }

        //
        // Event method for XllConnector_Batch_CallbackSessionExceptionOtherCause
        //
        public bool LogXllConnector_Batch_CallbackSessionExceptionOtherCause(string message, int sessionID, int clientID)
        {

            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateGenericExceptionWithBrokerClient(ref XllConnector_Batch_CallbackSessionExceptionOtherCause, message, sessionID, clientID);
        }

        //
        // Event method for XllConnector_Batch_CallbackException
        //
        public bool LogXllConnector_Batch_CallbackException(string message, int sessionID, int clientID)
        {

            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateGenericExceptionWithBrokerClient(ref XllConnector_Batch_CallbackException, message, sessionID, clientID);
        }

        //
        // Event method for XllConnector_Batch_CallbackQueueError
        //
        public bool LogXllConnector_Batch_CallbackQueueError(string message, int sessionID, int clientID)
        {

            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateGenericExceptionWithBrokerClient(ref XllConnector_Batch_CallbackQueueError, message, sessionID, clientID);
        }

        //
        // Event method for XllConnector_Batch_ProcessClearResponsesError
        //
        public bool LogXllConnector_Batch_ProcessClearResponsesError(string message, int sessionID, int clientID)
        {

            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateGenericExceptionWithBrokerClient(ref XllConnector_Batch_ProcessClearResponsesError, message, sessionID, clientID);
        }

        //
        // Event method for XllConnector_Batch_ProcessSetResponseError
        //
        public bool LogXllConnector_Batch_ProcessSetResponseError(string message, int sessionID, int clientID)
        {

            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateGenericExceptionWithBrokerClient(ref XllConnector_Batch_ProcessSetResponseError, message, sessionID, clientID);
        }

        //
        // Event method for XllConnector_Batch_ProcessSetResponseCancelError
        //
        public bool LogXllConnector_Batch_ProcessSetResponseCancelError(string message, int sessionID, int clientID)
        {

            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateGenericExceptionWithBrokerClient(ref XllConnector_Batch_ProcessSetResponseCancelError, message, sessionID, clientID);
        }

        //
        // Event method for XllConnector_Batch_CloseError
        //
        public bool LogXllConnector_Batch_CloseError(string message, int sessionID, int clientID)
        {

            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateGenericExceptionWithBrokerClient(ref XllConnector_Batch_CloseError, message, sessionID, clientID);
        }

        //
        // Event method for XllConnector_Config_HeadNodeError
        //
        public bool LogXllConnector_Config_HeadNodeError(string message)
        {

            return m_provider.WriteEvent(ref XllConnector_Config_HeadNodeError, message);

        }

        //
        // Event method for XllConnector_Config_JobTemplateError
        //
        public bool LogXllConnector_Config_JobTemplateError(string message)
        {

            return m_provider.WriteEvent(ref XllConnector_Config_JobTemplateError, message);

        }

        //
        // Event method for XllConnector_Config_StatusWindowSettingError
        //
        public bool LogXllConnector_Config_StatusWindowSettingError(string message)
        {

            return m_provider.WriteEvent(ref XllConnector_Config_StatusWindowSettingError, message);

        }

        //
        // Event method for XllConnector_Config_SetHeadNodeError
        //
        public bool LogXllConnector_Config_SetHeadNodeError(string message)
        {

            return m_provider.WriteEvent(ref XllConnector_Config_SetHeadNodeError, message);

        }

        //
        // Event method for XllConnector_Config_SetJobTemplateError
        //
        public bool LogXllConnector_Config_SetJobTemplateError(string message)
        {

            return m_provider.WriteEvent(ref XllConnector_Config_SetJobTemplateError, message);

        }

        //
        // Event method for XllConnector_Config_EnableStatusWindowError
        //
        public bool LogXllConnector_Config_EnableStatusWindowError(string message)
        {

            return m_provider.WriteEvent(ref XllConnector_Config_EnableStatusWindowError, message);

        }

        //
        // Event method for XllConnector_Config_SaveWorkbookSettingsError
        //
        public bool LogXllConnector_Config_SaveWorkbookSettingsError(string message)
        {

            return m_provider.WriteEvent(ref XllConnector_Config_SaveWorkbookSettingsError, message);

        }

        //
        // Event method for XllConnector_Config_SetHeadNodeCallError
        //
        public bool LogXllConnector_Config_SetHeadNodeCallError(string message)
        {

            return m_provider.WriteEvent(ref XllConnector_Config_SetHeadNodeCallError, message);

        }

        //
        // Event method for XllConnector_Config_SetJobTemplateCallError
        //
        public bool LogXllConnector_Config_SetJobTemplateCallError(string message)
        {

            return m_provider.WriteEvent(ref XllConnector_Config_SetJobTemplateCallError, message);

        }

        //
        // Event method for XllConnector_Config_UseWorkbookSettingsError
        //
        public bool LogXllConnector_Config_UseWorkbookSettingsError(string message)
        {

            return m_provider.WriteEvent(ref XllConnector_Config_UseWorkbookSettingsError, message);

        }

        //
        // Event method for XllConnector_Config_IsUsingWorkbookSettingsError
        //
        public bool LogXllConnector_Config_IsUsingWorkbookSettingsError(string message)
        {

            return m_provider.WriteEvent(ref XllConnector_Config_IsUsingWorkbookSettingsError, message);

        }

        //
        // Event method for XllConnector_Config_SaveWorkbookSettingsCallError
        //
        public bool LogXllConnector_Config_SaveWorkbookSettingsCallError(string message)
        {

            return m_provider.WriteEvent(ref XllConnector_Config_SaveWorkbookSettingsCallError, message);

        }

        //
        // Event method for XllConnector_HpcConnector_CallUdfFailure
        //
        public bool LogXllConnector_HpcConnector_CallUdfFailure(string message)
        {

            return m_provider.WriteEvent(ref XllConnector_HpcConnector_CallUdfFailure, message);

        }

        //
        // Event method for XllConnector_HpcConnector_ComOnConnectionFailure
        //
        public bool LogXllConnector_HpcConnector_ComOnConnectionFailure(string message)
        {

            return m_provider.WriteEvent(ref XllConnector_HpcConnector_ComOnConnectionFailure, message);

        }

        //
        // Event method for XllConnector_HpcConnector_ComOnDisconnectionFailure
        //
        public bool LogXllConnector_HpcConnector_ComOnDisconnectionFailure(string message)
        {

            return m_provider.WriteEvent(ref XllConnector_HpcConnector_ComOnDisconnectionFailure, message);

        }

        //
        // Event method for XllConnector_Request_SetReturnError
        //
        public bool LogXllConnector_Request_SetReturnError(string message)
        {

            return m_provider.WriteEvent(ref XllConnector_Request_SetReturnError, message);

        }

        //
        // Event method for XllConnector_Session_CloseSessionError
        //
        public bool LogXllConnector_Session_CloseSessionError(string message, int sessionID)
        {

            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateGenericExceptionWithSession(ref XllConnector_Session_CloseSessionError, message, sessionID);
        }

        //
        // Event method for XllConnector_Critical_OpenSessionError
        //
        public bool LogXllConnector_Critical_OpenSessionError(string message)
        {

            return m_provider.WriteEvent(ref XllConnector_Critical_OpenSessionError, message);

        }

        //
        // Event method for XllConnector_Session_SendingThreadFailure
        //
        public bool LogXllConnector_Session_SendingThreadFailure(string message, int sessionID)
        {

            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateGenericExceptionWithSession(ref XllConnector_Session_SendingThreadFailure, message, sessionID);
        }

        //
        // Event method for XllConnector_Session_CloseSessionCallError
        //
        public bool LogXllConnector_Session_CloseSessionCallError(string message, int sessionID)
        {

            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateGenericExceptionWithSession(ref XllConnector_Session_CloseSessionCallError, message, sessionID);
        }

        //
        // Event method for XllConnector_Session_RetryBatchesError
        //
        public bool LogXllConnector_Session_RetryBatchesError(string message, int sessionID)
        {

            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateGenericExceptionWithSession(ref XllConnector_Session_RetryBatchesError, message, sessionID);
        }

        //
        // Event method for XllConnector_Session_BatchUdfRequestFailure
        //
        public bool LogXllConnector_Session_BatchUdfRequestFailure(string message, int sessionID)
        {

            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateGenericExceptionWithSession(ref XllConnector_Session_BatchUdfRequestFailure, message, sessionID);
        }

        //
        // Event method for XllConnector_Session_BatchRetryFailure
        //
        public bool LogXllConnector_Session_BatchRetryFailure(string message, int sessionID)
        {

            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateGenericExceptionWithSession(ref XllConnector_Session_BatchRetryFailure, message, sessionID);
        }

        //
        // Event method for XllConnector_Session_CancelFailure
        //
        public bool LogXllConnector_Session_CancelFailure(string message, int sessionID)
        {

            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateGenericExceptionWithSession(ref XllConnector_Session_CancelFailure, message, sessionID);
        }

        //
        // Event method for XllContainer_Container_ServiceConfigError
        //
        public bool LogXllContainer_Container_ServiceConfigError(string message, int sessionID)
        {

            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateGenericExceptionWithSession(ref XllContainer_Container_ServiceConfigError, message, sessionID);
        }

        //
        // Event method for XllContainer_Container_UdfCallFailed
        //
        public bool LogXllContainer_Container_UdfCallFailed(string returnValue, int hResult, string udfName, string xllName, int sessionId)
        {

            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateTraceUdfCallErrorWithSession(ref XllContainer_Container_UdfCallFailed, returnValue, hResult, udfName, xllName, sessionId);
        }

        //
        // Event method for XllContainer_Container_AutoOpenFailed
        //
        public bool LogXllContainer_Container_AutoOpenFailed(string value)
        {

            return m_provider.WriteEvent(ref XllContainer_Container_AutoOpenFailed, value);

        }

        //
        // Event method for XllContainer_Critical_LoadFailed
        //
        public bool LogXllContainer_Critical_LoadFailed(string udfName, string xllName)
        {

            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateTraceUdfInfo(ref XllContainer_Critical_LoadFailed, udfName, xllName);
        }

        //
        // Event method for XllContainer_Critical_LoadFailedOnAzure
        //
        public bool LogXllContainer_Critical_LoadFailedOnAzure(string udfName, string xllName)
        {

            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateTraceUdfInfo(ref XllContainer_Critical_LoadFailedOnAzure, udfName, xllName);
        }

        //
        // Event method for XllContainer_Critical_CppPackageRootIsMissing
        //
        public bool LogXllContainer_Critical_CppPackageRootIsMissing(string udfName, string xllName)
        {

            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateTraceUdfInfo(ref XllContainer_Critical_CppPackageRootIsMissing, udfName, xllName);
        }

        //
        // Event method for ExcelDriver_WriteDebugTextCritical
        //
        public bool LogExcelDriver_WriteDebugTextCritical(string message)
        {

            return m_provider.WriteEvent(ref ExcelDriver_WriteDebugTextCritical, message);

        }

        //
        // Event method for ExcelDriver_WriteDebugTextError
        //
        public bool LogExcelDriver_WriteDebugTextError(string message)
        {

            return m_provider.WriteEvent(ref ExcelDriver_WriteDebugTextError, message);

        }

        //
        // Event method for ExcelDriver_WriteDebugTextWarning
        //
        public bool LogExcelDriver_WriteDebugTextWarning(string message)
        {

            return m_provider.WriteEvent(ref ExcelDriver_WriteDebugTextWarning, message);

        }

        //
        // Event method for ExcelDriver_WriteDebugTextInfo
        //
        public bool LogExcelDriver_WriteDebugTextInfo(string message)
        {

            return m_provider.WriteEvent(ref ExcelDriver_WriteDebugTextInfo, message);

        }

        //
        // Event method for ExcelDriver_WriteDebugTextVerbose
        //
        public bool LogExcelDriver_WriteDebugTextVerbose(string message)
        {

            return m_provider.WriteEvent(ref ExcelDriver_WriteDebugTextVerbose, message);

        }

        //
        // Event method for ExcelService_WriteDebugTextCritical
        //
        public bool LogExcelService_WriteDebugTextCritical(string message)
        {

            return m_provider.WriteEvent(ref ExcelService_WriteDebugTextCritical, message);

        }

        //
        // Event method for ExcelService_WriteDebugTextError
        //
        public bool LogExcelService_WriteDebugTextError(string message)
        {

            return m_provider.WriteEvent(ref ExcelService_WriteDebugTextError, message);

        }

        //
        // Event method for ExcelService_WriteDebugTextWarning
        //
        public bool LogExcelService_WriteDebugTextWarning(string message)
        {

            return m_provider.WriteEvent(ref ExcelService_WriteDebugTextWarning, message);

        }

        //
        // Event method for ExcelService_WriteDebugTextInfo
        //
        public bool LogExcelService_WriteDebugTextInfo(string message)
        {

            return m_provider.WriteEvent(ref ExcelService_WriteDebugTextInfo, message);

        }

        //
        // Event method for ExcelService_WriteDebugTextVerbose
        //
        public bool LogExcelService_WriteDebugTextVerbose(string message)
        {

            return m_provider.WriteEvent(ref ExcelService_WriteDebugTextVerbose, message);

        }

        //
        // Event method for ExcelClient_WriteDebugTextCritical
        //
        public bool LogExcelClient_WriteDebugTextCritical(string message)
        {

            return m_provider.WriteEvent(ref ExcelClient_WriteDebugTextCritical, message);

        }

        //
        // Event method for ExcelClient_WriteDebugTextError
        //
        public bool LogExcelClient_WriteDebugTextError(string message)
        {

            return m_provider.WriteEvent(ref ExcelClient_WriteDebugTextError, message);

        }

        //
        // Event method for ExcelClient_WriteDebugTextWarning
        //
        public bool LogExcelClient_WriteDebugTextWarning(string message)
        {

            return m_provider.WriteEvent(ref ExcelClient_WriteDebugTextWarning, message);

        }

        //
        // Event method for ExcelClient_WriteDebugTextInfo
        //
        public bool LogExcelClient_WriteDebugTextInfo(string message)
        {

            return m_provider.WriteEvent(ref ExcelClient_WriteDebugTextInfo, message);

        }

        //
        // Event method for ExcelClient_WriteDebugTextVerbose
        //
        public bool LogExcelClient_WriteDebugTextVerbose(string message)
        {

            return m_provider.WriteEvent(ref ExcelClient_WriteDebugTextVerbose, message);

        }

        //
        // Event method for ExcelDriver_OpenWorkbookFailed
        //
        public bool LogExcelDriver_OpenWorkbookFailed(string Workbook, string Exception)
        {

            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateWorkbookException(ref ExcelDriver_OpenWorkbookFailed, Workbook, Exception);
        }

        //
        // Event method for ExcelDriver_StartProcessFailed
        //
        public bool LogExcelDriver_StartProcessFailed(string message)
        {

            return m_provider.WriteEvent(ref ExcelDriver_StartProcessFailed, message);

        }

        //
        // Event method for ExcelDriver_MacroFailed
        //
        public bool LogExcelDriver_MacroFailed(string Macro, string Workbook, string Exception)
        {

            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateMacroException(ref ExcelDriver_MacroFailed, Macro, Workbook, Exception);
        }

        //
        // Event method for ExcelDriver_WorkbookDNE
        //
        public bool LogExcelDriver_WorkbookDNE(string Workbook, string Exception)
        {

            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateWorkbookException(ref ExcelDriver_WorkbookDNE, Workbook, Exception);
        }

        //
        // Event method for ExcelDriver_WorkbookVersionMismatch
        //
        public bool LogExcelDriver_WorkbookVersionMismatch(string Workbook, string Exception)
        {

            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateWorkbookException(ref ExcelDriver_WorkbookVersionMismatch, Workbook, Exception);
        }

        //
        // Event method for ExcelDriver_BlockingPopup
        //
        public bool LogExcelDriver_BlockingPopup(string Title, string Message, string Class)
        {

            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplatePopupWindow(ref ExcelDriver_BlockingPopup, Title, Message, Class);
        }

        //
        // Event method for ExcelService_SystemicFailure
        //
        public bool LogExcelService_SystemicFailure(string Session, string Task, string Node, string Exception)
        {

            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateNodeException(ref ExcelService_SystemicFailure, Session, Task, Node, Exception);
        }

        //
        // Event method for ExcelClient_OpenSessionError
        //
        public bool LogExcelClient_OpenSessionError(string Service, string Scheduler, string Exception)
        {

            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateSessionOpen(ref ExcelClient_OpenSessionError, Service, Scheduler, Exception);
        }

        //
        // Event method for ExcelClient_CloseSessionError
        //
        public bool LogExcelClient_CloseSessionError(string message)
        {

            return m_provider.WriteEvent(ref ExcelClient_CloseSessionError, message);

        }

        //
        // Event method for ExcelClient_FatalResponse
        //
        public bool LogExcelClient_FatalResponse(string message, int sessionID)
        {

            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateGenericExceptionWithSession(ref ExcelClient_FatalResponse, message, sessionID);
        }

        //
        // Event method for ExcelClient_RunError
        //
        public bool LogExcelClient_RunError(string Workbook, string Exception)
        {

            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateWorkbookException(ref ExcelClient_RunError, Workbook, Exception);
        }

        //
        // Event method for ExcelService_ApplicationError
        //
        public bool LogExcelService_ApplicationError(string Session, string Task, string Node, string Exception)
        {

            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateNodeException(ref ExcelService_ApplicationError, Session, Task, Node, Exception);
        }

        //
        // Event method for ExcelClient_CancelError
        //
        public bool LogExcelClient_CancelError(string message, int sessionID)
        {

            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateGenericExceptionWithSession(ref ExcelClient_CancelError, message, sessionID);
        }

        //
        // Event method for XllConnector_Critical_NotComAddin
        //
        public bool LogXllConnector_Critical_NotComAddin(){

            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateEventDescriptor(ref XllConnector_Critical_NotComAddin);
        }

        //
        // Event method for XllConnector_Critical_TypeLoadError
        //
        public bool LogXllConnector_Critical_TypeLoadError(string message)
        {

            return m_provider.WriteEvent(ref XllConnector_Critical_TypeLoadError, message);

        }

        //
        // Event method for XllConnector_Batch_CallbackSessionExceptionInitializeFailed
        //
        public bool LogXllConnector_Batch_CallbackSessionExceptionInitializeFailed(string message, int sessionID, int clientID)
        {

            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateGenericExceptionWithBrokerClient(ref XllConnector_Batch_CallbackSessionExceptionInitializeFailed, message, sessionID, clientID);
        }
    }

    internal class EventProviderVersionTwo : EventProvider
    {
         internal EventProviderVersionTwo(Guid id)
                : base(id)
         {}


        [StructLayout(LayoutKind.Explicit, Size = 16)]
        private struct EventData
        {
            [FieldOffset(0)]
            internal UInt64 DataPointer;
            [FieldOffset(8)]
            internal uint Size;
            [FieldOffset(12)]
            internal int Reserved;
        }



        internal unsafe bool TemplateGenericExceptionWithBrokerClient(
            ref EventDescriptor eventDescriptor,
            string message,
            int sessionID,
            int clientID
            )
        {
            int argumentCount = 3;
            bool status = true;

            if (IsEnabled(eventDescriptor.Level, eventDescriptor.Keywords))
            {
                byte* userData = stackalloc byte[sizeof(EventData) * argumentCount];
                EventData* userDataPtr = (EventData*)userData;

                userDataPtr[0].Size = (uint)(message.Length + 1)*sizeof(char);

                userDataPtr[1].DataPointer = (UInt64)(&sessionID);
                userDataPtr[1].Size = (uint)(sizeof(int)  );

                userDataPtr[2].DataPointer = (UInt64)(&clientID);
                userDataPtr[2].Size = (uint)(sizeof(int)  );

                fixed (char* a0 = message)
                {
                    userDataPtr[0].DataPointer = (ulong)a0;
                    status = WriteEvent(ref eventDescriptor, argumentCount, (IntPtr)(userData));
                }
            }

            return status;

        }



        internal unsafe bool TemplateGenericExceptionWithSession(
            ref EventDescriptor eventDescriptor,
            string message,
            int sessionID
            )
        {
            int argumentCount = 2;
            bool status = true;

            if (IsEnabled(eventDescriptor.Level, eventDescriptor.Keywords))
            {
                byte* userData = stackalloc byte[sizeof(EventData) * argumentCount];
                EventData* userDataPtr = (EventData*)userData;

                userDataPtr[0].Size = (uint)(message.Length + 1)*sizeof(char);

                userDataPtr[1].DataPointer = (UInt64)(&sessionID);
                userDataPtr[1].Size = (uint)(sizeof(int)  );

                fixed (char* a0 = message)
                {
                    userDataPtr[0].DataPointer = (ulong)a0;
                    status = WriteEvent(ref eventDescriptor, argumentCount, (IntPtr)(userData));
                }
            }

            return status;

        }



        internal unsafe bool TemplateTraceUdfCallErrorWithSession(
            ref EventDescriptor eventDescriptor,
            string returnValue,
            int hResult,
            string udfName,
            string xllName,
            int sessionId
            )
        {
            int argumentCount = 5;
            bool status = true;

            if (IsEnabled(eventDescriptor.Level, eventDescriptor.Keywords))
            {
                byte* userData = stackalloc byte[sizeof(EventData) * argumentCount];
                EventData* userDataPtr = (EventData*)userData;

                userDataPtr[0].Size = (uint)(returnValue.Length + 1)*sizeof(char);

                userDataPtr[1].DataPointer = (UInt64)(&hResult);
                userDataPtr[1].Size = (uint)(sizeof(int)  );

                userDataPtr[2].Size = (uint)(udfName.Length + 1)*sizeof(char);

                userDataPtr[3].Size = (uint)(xllName.Length + 1)*sizeof(char);

                userDataPtr[4].DataPointer = (UInt64)(&sessionId);
                userDataPtr[4].Size = (uint)(sizeof(int)  );

                fixed (char* a0 = returnValue, a1 = udfName, a2 = xllName)
                {
                    userDataPtr[0].DataPointer = (ulong)a0;
                    userDataPtr[2].DataPointer = (ulong)a1;
                    userDataPtr[3].DataPointer = (ulong)a2;
                    status = WriteEvent(ref eventDescriptor, argumentCount, (IntPtr)(userData));
                }
            }

            return status;

        }



        internal unsafe bool TemplateTraceUdfInfo(
            ref EventDescriptor eventDescriptor,
            string udfName,
            string xllName
            )
        {
            int argumentCount = 2;
            bool status = true;

            if (IsEnabled(eventDescriptor.Level, eventDescriptor.Keywords))
            {
                byte* userData = stackalloc byte[sizeof(EventData) * argumentCount];
                EventData* userDataPtr = (EventData*)userData;

                userDataPtr[0].Size = (uint)(udfName.Length + 1)*sizeof(char);

                userDataPtr[1].Size = (uint)(xllName.Length + 1)*sizeof(char);

                fixed (char* a0 = udfName, a1 = xllName)
                {
                    userDataPtr[0].DataPointer = (ulong)a0;
                    userDataPtr[1].DataPointer = (ulong)a1;
                    status = WriteEvent(ref eventDescriptor, argumentCount, (IntPtr)(userData));
                }
            }

            return status;

        }



        internal unsafe bool TemplateWorkbookException(
            ref EventDescriptor eventDescriptor,
            string Workbook,
            string Exception
            )
        {
            int argumentCount = 2;
            bool status = true;

            if (IsEnabled(eventDescriptor.Level, eventDescriptor.Keywords))
            {
                byte* userData = stackalloc byte[sizeof(EventData) * argumentCount];
                EventData* userDataPtr = (EventData*)userData;

                userDataPtr[0].Size = (uint)(Workbook.Length + 1)*sizeof(char);

                userDataPtr[1].Size = (uint)(Exception.Length + 1)*sizeof(char);

                fixed (char* a0 = Workbook, a1 = Exception)
                {
                    userDataPtr[0].DataPointer = (ulong)a0;
                    userDataPtr[1].DataPointer = (ulong)a1;
                    status = WriteEvent(ref eventDescriptor, argumentCount, (IntPtr)(userData));
                }
            }

            return status;

        }



        internal unsafe bool TemplateMacroException(
            ref EventDescriptor eventDescriptor,
            string Macro,
            string Workbook,
            string Exception
            )
        {
            int argumentCount = 3;
            bool status = true;

            if (IsEnabled(eventDescriptor.Level, eventDescriptor.Keywords))
            {
                byte* userData = stackalloc byte[sizeof(EventData) * argumentCount];
                EventData* userDataPtr = (EventData*)userData;

                userDataPtr[0].Size = (uint)(Macro.Length + 1)*sizeof(char);

                userDataPtr[1].Size = (uint)(Workbook.Length + 1)*sizeof(char);

                userDataPtr[2].Size = (uint)(Exception.Length + 1)*sizeof(char);

                fixed (char* a0 = Macro, a1 = Workbook, a2 = Exception)
                {
                    userDataPtr[0].DataPointer = (ulong)a0;
                    userDataPtr[1].DataPointer = (ulong)a1;
                    userDataPtr[2].DataPointer = (ulong)a2;
                    status = WriteEvent(ref eventDescriptor, argumentCount, (IntPtr)(userData));
                }
            }

            return status;

        }



        internal unsafe bool TemplatePopupWindow(
            ref EventDescriptor eventDescriptor,
            string Title,
            string Message,
            string Class
            )
        {
            int argumentCount = 3;
            bool status = true;

            if (IsEnabled(eventDescriptor.Level, eventDescriptor.Keywords))
            {
                byte* userData = stackalloc byte[sizeof(EventData) * argumentCount];
                EventData* userDataPtr = (EventData*)userData;

                userDataPtr[0].Size = (uint)(Title.Length + 1)*sizeof(char);

                userDataPtr[1].Size = (uint)(Message.Length + 1)*sizeof(char);

                userDataPtr[2].Size = (uint)(Class.Length + 1)*sizeof(char);

                fixed (char* a0 = Title, a1 = Message, a2 = Class)
                {
                    userDataPtr[0].DataPointer = (ulong)a0;
                    userDataPtr[1].DataPointer = (ulong)a1;
                    userDataPtr[2].DataPointer = (ulong)a2;
                    status = WriteEvent(ref eventDescriptor, argumentCount, (IntPtr)(userData));
                }
            }

            return status;

        }



        internal unsafe bool TemplateNodeException(
            ref EventDescriptor eventDescriptor,
            string Session,
            string Task,
            string Node,
            string Exception
            )
        {
            int argumentCount = 4;
            bool status = true;

            if (IsEnabled(eventDescriptor.Level, eventDescriptor.Keywords))
            {
                byte* userData = stackalloc byte[sizeof(EventData) * argumentCount];
                EventData* userDataPtr = (EventData*)userData;

                userDataPtr[0].Size = (uint)(Session.Length + 1)*sizeof(char);

                userDataPtr[1].Size = (uint)(Task.Length + 1)*sizeof(char);

                userDataPtr[2].Size = (uint)(Node.Length + 1)*sizeof(char);

                userDataPtr[3].Size = (uint)(Exception.Length + 1)*sizeof(char);

                fixed (char* a0 = Session, a1 = Task, a2 = Node, a3 = Exception)
                {
                    userDataPtr[0].DataPointer = (ulong)a0;
                    userDataPtr[1].DataPointer = (ulong)a1;
                    userDataPtr[2].DataPointer = (ulong)a2;
                    userDataPtr[3].DataPointer = (ulong)a3;
                    status = WriteEvent(ref eventDescriptor, argumentCount, (IntPtr)(userData));
                }
            }

            return status;

        }



        internal unsafe bool TemplateSessionOpen(
            ref EventDescriptor eventDescriptor,
            string Service,
            string Scheduler,
            string Exception
            )
        {
            int argumentCount = 3;
            bool status = true;

            if (IsEnabled(eventDescriptor.Level, eventDescriptor.Keywords))
            {
                byte* userData = stackalloc byte[sizeof(EventData) * argumentCount];
                EventData* userDataPtr = (EventData*)userData;

                userDataPtr[0].Size = (uint)(Service.Length + 1)*sizeof(char);

                userDataPtr[1].Size = (uint)(Scheduler.Length + 1)*sizeof(char);

                userDataPtr[2].Size = (uint)(Exception.Length + 1)*sizeof(char);

                fixed (char* a0 = Service, a1 = Scheduler, a2 = Exception)
                {
                    userDataPtr[0].DataPointer = (ulong)a0;
                    userDataPtr[1].DataPointer = (ulong)a1;
                    userDataPtr[2].DataPointer = (ulong)a2;
                    status = WriteEvent(ref eventDescriptor, argumentCount, (IntPtr)(userData));
                }
            }

            return status;

        }



        internal bool TemplateEventDescriptor(
            ref EventDescriptor eventDescriptor
            )
        {
            if (IsEnabled(eventDescriptor.Level, eventDescriptor.Keywords)){
                return WriteEvent(ref eventDescriptor, 0, IntPtr.Zero);
            }

            return true; 
        }

    }

}
