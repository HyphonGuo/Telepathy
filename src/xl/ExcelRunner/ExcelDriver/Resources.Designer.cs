//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Hpc.Excel {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Microsoft.Hpc.Excel.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No error handlers have been provided..
        /// </summary>
        public static string ExcelClient_ErrorHandlerMissing {
            get {
                return ResourceManager.GetString("ExcelClient_ErrorHandlerMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Experienced an exception while processing cluster responses..
        /// </summary>
        public static string ExcelClient_ErrorOnResponse {
            get {
                return ResourceManager.GetString("ExcelClient_ErrorOnResponse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to load assembly &apos;{0}&apos;: {1}..
        /// </summary>
        public static string ExcelClient_FailedLoadAssembly {
            get {
                return ResourceManager.GetString("ExcelClient_FailedLoadAssembly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {0} macro must be implemented and return a valid version string..
        /// </summary>
        public static string ExcelClient_GetVersionMissing {
            get {
                return ResourceManager.GetString("ExcelClient_GetVersionMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Initialized ExcelClient instance with {0}..
        /// </summary>
        public static string ExcelClient_Initialization {
            get {
                return ResourceManager.GetString("ExcelClient_Initialization", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid value of parameter {0}: {1}. It must be True or False..
        /// </summary>
        public static string ExcelClient_InvalidBoolParamValue {
            get {
                return ResourceManager.GetString("ExcelClient_InvalidBoolParamValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid value of parameter dependFiles:
        ///{0}
        ///
        ///The correct format is &quot;localFilePath1=remoteFilePath1;localFilePath2=remoteFilePath2;...&quot;, where the remote file paths must be relative paths..
        /// </summary>
        public static string ExcelClient_InvalidDependFiles {
            get {
                return ResourceManager.GetString("ExcelClient_InvalidDependFiles", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Maximum resource parameter, {0}, is not a valid integer..
        /// </summary>
        public static string ExcelClient_InvalidMaxCores {
            get {
                return ResourceManager.GetString("ExcelClient_InvalidMaxCores", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Minimum resource parameter, {0}, is not a valid integer..
        /// </summary>
        public static string ExcelClient_InvalidMinCores {
            get {
                return ResourceManager.GetString("ExcelClient_InvalidMinCores", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Job priority parameter, {0}, is not a valid integer..
        /// </summary>
        public static string ExcelClient_InvalidPriority {
            get {
                return ResourceManager.GetString("ExcelClient_InvalidPriority", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Resource type parameter, {0}, does not map to a valid resource type..
        /// </summary>
        public static string ExcelClient_InvalidResType {
            get {
                return ResourceManager.GetString("ExcelClient_InvalidResType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid transport scheme: {0}. It must be Http or NetTcp..
        /// </summary>
        public static string ExcelClient_InvalidTransportScheme {
            get {
                return ResourceManager.GetString("ExcelClient_InvalidTransportScheme", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The string returned by {0} is not a valid .NET version string:.
        /// </summary>
        public static string ExcelClient_InvalidVersionString {
            get {
                return ResourceManager.GetString("ExcelClient_InvalidVersionString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} macro failed or is not implemented..
        /// </summary>
        public static string ExcelClient_MacroFailed {
            get {
                return ResourceManager.GetString("ExcelClient_MacroFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The MacroResource property specifying the resource that implements the HPC macros may only be set prior to initialization..
        /// </summary>
        public static string ExcelClient_MacroResourcePostInit {
            get {
                return ResourceManager.GetString("ExcelClient_MacroResourcePostInit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Opening a new BrokerClient attached to session {0} on {1}..
        /// </summary>
        public static string ExcelClient_OpenClient {
            get {
                return ResourceManager.GetString("ExcelClient_OpenClient", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Opened session {0} on {1}..
        /// </summary>
        public static string ExcelClient_OpenSession {
            get {
                return ResourceManager.GetString("ExcelClient_OpenSession", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OpenSession cannot be called before ExcelClient has finished calling {0}..
        /// </summary>
        public static string ExcelClient_OpenSessionDuringRun {
            get {
                return ResourceManager.GetString("ExcelClient_OpenSessionDuringRun", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Another session cannot be opened before the current session is closed..
        /// </summary>
        public static string ExcelClient_OpenSessionTwice {
            get {
                return ResourceManager.GetString("ExcelClient_OpenSessionTwice", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} macro returned null or empty array on first invocation. This behavior is not permitted..
        /// </summary>
        public static string ExcelClient_PartitionNullImmediately {
            get {
                return ResourceManager.GetString("ExcelClient_PartitionNullImmediately", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Access to the path &apos;{0}&apos; is denied..
        /// </summary>
        public static string ExcelClient_RemoteAccessDenied {
            get {
                return ResourceManager.GetString("ExcelClient_RemoteAccessDenied", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot find directory in {0}. Shared directories must be created prior to workbook deployment..
        /// </summary>
        public static string ExcelClient_RemoteDirectoryDNE {
            get {
                return ResourceManager.GetString("ExcelClient_RemoteDirectoryDNE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Resource type must be one of: {0}, {1}, or {2}..
        /// </summary>
        public static string ExcelClient_ResourceType {
            get {
                return ResourceManager.GetString("ExcelClient_ResourceType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ExcelClient cannot run the workbook before it is initialized..
        /// </summary>
        public static string ExcelClient_RunBeforeInitialize {
            get {
                return ResourceManager.GetString("ExcelClient_RunBeforeInitialize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Beginning local run with workbook at {0}..
        /// </summary>
        public static string ExcelClient_RunLocal {
            get {
                return ResourceManager.GetString("ExcelClient_RunLocal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Beginning cluster run on {0} with workbook at {1}..
        /// </summary>
        public static string ExcelClient_RunOnCluster {
            get {
                return ResourceManager.GetString("ExcelClient_RunOnCluster", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The workbook version(s) returned by {0}, {1}, are not supported by the current version of ExcelClient. Workbook versions supported: {2}.
        /// </summary>
        public static string ExcelClient_VersionMismatch {
            get {
                return ResourceManager.GetString("ExcelClient_VersionMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The remote workbook at {0} cannot be overwritten because it is in use by another process..
        /// </summary>
        public static string ExcelClientCantOverwriteWB {
            get {
                return ResourceManager.GetString("ExcelClientCantOverwriteWB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The session must not be null. Ensure that OpenSession is called before CloseSession..
        /// </summary>
        public static string ExcelClientCloseBeforeOpen {
            get {
                return ResourceManager.GetString("ExcelClientCloseBeforeOpen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Local and remote workbook paths are the same. Cannot perform deployment..
        /// </summary>
        public static string ExcelClientDeployToSamePath {
            get {
                return ResourceManager.GetString("ExcelClientDeployToSamePath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Exception on {0}: .
        /// </summary>
        public static string ExcelClientExceptionOn {
            get {
                return ResourceManager.GetString("ExcelClientExceptionOn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Each ExcelClient instance must be initialized only once..
        /// </summary>
        public static string ExcelClientInitializeOnce {
            get {
                return ResourceManager.GetString("ExcelClientInitializeOnce", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SOA Session has been cancelled or has experienced a failure. Alternatively, the session may have timed out..
        /// </summary>
        public static string ExcelClientJobCancelled {
            get {
                return ResourceManager.GetString("ExcelClientJobCancelled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multiple invocations of the Run method must not occur concurrently..
        /// </summary>
        public static string ExcelClientMultipleRuns {
            get {
                return ResourceManager.GetString("ExcelClientMultipleRuns", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Session cannot be opened before ExcelClient is initialized..
        /// </summary>
        public static string ExcelClientOpenSessionBeforeInit {
            get {
                return ResourceManager.GetString("ExcelClientOpenSessionBeforeInit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No session is currently open. Cannot run on cluster without an open session..
        /// </summary>
        public static string ExcelClientSessionNotOpen {
            get {
                return ResourceManager.GetString("ExcelClientSessionNotOpen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remote workbook path is null or empty. Path must be supplied prior to cluster execution..
        /// </summary>
        public static string ExcelClientWBPathNull {
            get {
                return ResourceManager.GetString("ExcelClientWBPathNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Closing workbook unsuccessful: {0}.
        /// </summary>
        public static string ExcelDriver_CloseWBFailed {
            get {
                return ResourceManager.GetString("ExcelDriver_CloseWBFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Found unreadable content in workbook. Verify that {0} can be opened manually..
        /// </summary>
        public static string ExcelDriver_CorruptWorkbook {
            get {
                return ResourceManager.GetString("ExcelDriver_CorruptWorkbook", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invoking {0} macro in workbook {1}..
        /// </summary>
        public static string ExcelDriver_InvokeMacro {
            get {
                return ResourceManager.GetString("ExcelDriver_InvokeMacro", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Closing Excel process unsuccessful: {0}.
        /// </summary>
        public static string ExcelDriver_KillExcelFailed {
            get {
                return ResourceManager.GetString("ExcelDriver_KillExcelFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Each ExcelDriver instance must launch and Excel process only once..
        /// </summary>
        public static string ExcelDriver_LaunchExcelOnce {
            get {
                return ResourceManager.GetString("ExcelDriver_LaunchExcelOnce", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Execution of {0} macro failed in workbook {1}: {2}.
        /// </summary>
        public static string ExcelDriver_MacroExecutionFail {
            get {
                return ResourceManager.GetString("ExcelDriver_MacroExecutionFail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invocation of {0} macro failed in workbook {1}: {2} Please refer to product documentation for potential causes..
        /// </summary>
        public static string ExcelDriver_MacroFailed {
            get {
                return ResourceManager.GetString("ExcelDriver_MacroFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invocation of {0} macro failed in workbook {1}: {2}.
        /// </summary>
        public static string ExcelDriver_MacroInvocationFail {
            get {
                return ResourceManager.GetString("ExcelDriver_MacroInvocationFail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Closing Excel Launch Mutex unsuccessful: {0}.
        /// </summary>
        public static string ExcelDriver_MutexCloseFailed {
            get {
                return ResourceManager.GetString("ExcelDriver_MutexCloseFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ExcelDriver is launching Excel..
        /// </summary>
        public static string ExcelDriver_OpeningExcel {
            get {
                return ResourceManager.GetString("ExcelDriver_OpeningExcel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ExcelDriver is opening workbook at {0}..
        /// </summary>
        public static string ExcelDriver_OpeningWorkbook {
            get {
                return ResourceManager.GetString("ExcelDriver_OpeningWorkbook", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Quitting Excel application unsuccessful: {0}.
        /// </summary>
        public static string ExcelDriver_QuitExcelFailed {
            get {
                return ResourceManager.GetString("ExcelDriver_QuitExcelFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to open workbook at {0}. Retrying..
        /// </summary>
        public static string ExcelDriver_RetryWorkbookOpen {
            get {
                return ResourceManager.GetString("ExcelDriver_RetryWorkbookOpen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Previous workbook already closed or otherwise inaccessible: {0}.
        /// </summary>
        public static string ExcelDriver_WorkbookClosed {
            get {
                return ResourceManager.GetString("ExcelDriver_WorkbookClosed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot find Excel application CLSID. Check installation..
        /// </summary>
        public static string ExcelDriverCLSIDMissing {
            get {
                return ResourceManager.GetString("ExcelDriverCLSIDMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot find path to {0}. Make sure that Excel is installed..
        /// </summary>
        public static string ExcelDriverExecutableMissing {
            get {
                return ResourceManager.GetString("ExcelDriverExecutableMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error occurred during execution of macro {0}..
        /// </summary>
        public static string ExcelDriverFaultInMacro {
            get {
                return ResourceManager.GetString("ExcelDriverFaultInMacro", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to GetCellValue failed to retrieve the value at cell reference {0}..
        /// </summary>
        public static string ExcelDriverGetCellInvalid {
            get {
                return ResourceManager.GetString("ExcelDriverGetCellInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Excel is not responsive..
        /// </summary>
        public static string ExcelDriverNotResponsive {
            get {
                return ResourceManager.GetString("ExcelDriverNotResponsive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SetCellValue failed to assign the specified value to cell reference {0}..
        /// </summary>
        public static string ExcelDriverSetCellInvalid {
            get {
                return ResourceManager.GetString("ExcelDriverSetCellInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fatal Error: workbook does not exist at specified location..
        /// </summary>
        public static string ExcelDriverWorkbookDNE {
            get {
                return ResourceManager.GetString("ExcelDriverWorkbookDNE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fatal Error when opening workbook. File Not Found..
        /// </summary>
        public static string ExcelDriverWorkbookNotFound {
            get {
                return ResourceManager.GetString("ExcelDriverWorkbookNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Local document is out of date. Saved {0} instead of {1}..
        /// </summary>
        public static string ExcelDriverWorkbookVersionMismatch {
            get {
                return ResourceManager.GetString("ExcelDriverWorkbookVersionMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Session {0}, Task{1} -  ExcelService failed to handle a request on {2} due to an application error: {3}.
        /// </summary>
        public static string ExcelService_ApplicationError {
            get {
                return ResourceManager.GetString("ExcelService_ApplicationError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to find package: {0}. Falling back to: {1}.
        /// </summary>
        public static string ExcelService_CantFindPackage {
            get {
                return ResourceManager.GetString("ExcelService_CantFindPackage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to find workbook in package path: {0}. Falling back to: {1}.
        /// </summary>
        public static string ExcelService_CantFindPackageWB {
            get {
                return ResourceManager.GetString("ExcelService_CantFindPackageWB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to find workbook in package {0}, or in workbook path {1}. Make sure the workbook is correctly deployed to Microsoft Azure nodes..
        /// </summary>
        public static string ExcelService_CantFindWbAzure {
            get {
                return ResourceManager.GetString("ExcelService_CantFindWbAzure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Beginning request processing without open workbook..
        /// </summary>
        public static string ExcelService_FirstRequest {
            get {
                return ResourceManager.GetString("ExcelService_FirstRequest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to get value of {0} environment variable..
        /// </summary>
        public static string ExcelService_NoCcpPackageRoot {
            get {
                return ResourceManager.GetString("ExcelService_NoCcpPackageRoot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Session {0}, Task {1} - ExcelService is opening workbook at {2} on {3}..
        /// </summary>
        public static string ExcelService_OpeningWorkbook {
            get {
                return ResourceManager.GetString("ExcelService_OpeningWorkbook", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Beginning request processing with open workbook..
        /// </summary>
        public static string ExcelService_OtherRequest {
            get {
                return ResourceManager.GetString("ExcelService_OtherRequest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Session {0}, Task{1} -  Experienced COM automation error. Closing Excel and retrying service operation. Recovering after: {2}.
        /// </summary>
        public static string ExcelService_RetryAfterRPC {
            get {
                return ResourceManager.GetString("ExcelService_RetryAfterRPC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cancelling current operations cleanly....
        /// </summary>
        public static string HPCExcelCLI_Cancelling {
            get {
                return ResourceManager.GetString("HPCExcelCLI_Cancelling", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to shut down cleanly. Ensure that any submitted jobs have been cancelled..
        /// </summary>
        public static string HPCExcelCLI_CancellingFailed {
            get {
                return ResourceManager.GetString("HPCExcelCLI_CancellingFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ERROR: Excel close flag already set..
        /// </summary>
        public static string HPCExcelCLI_CloseFlagSet {
            get {
                return ResourceManager.GetString("HPCExcelCLI_CloseFlagSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error while running workbook in session {1}: {0}.
        /// </summary>
        public static string HPCExcelCLI_ClusterRunError {
            get {
                return ResourceManager.GetString("HPCExcelCLI_ClusterRunError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ERROR: DeployWorkbook flag already set..
        /// </summary>
        public static string HPCExcelCLI_DeployFlagSet {
            get {
                return ResourceManager.GetString("HPCExcelCLI_DeployFlagSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error while deploying workbook to {0} in session {2}: {1}.
        /// </summary>
        public static string HPCExcelCLI_DeployWBError {
            get {
                return ResourceManager.GetString("HPCExcelCLI_DeployWBError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ERROR: Boolean value is invalid in parameter: {0}.
        /// </summary>
        public static string HPCExcelCLI_InvalidBool {
            get {
                return ResourceManager.GetString("HPCExcelCLI_InvalidBool", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ERROR: Number of cores is not a valid integer: {0}.
        /// </summary>
        public static string HPCExcelCLI_InvalidCores {
            get {
                return ResourceManager.GetString("HPCExcelCLI_InvalidCores", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ERROR: Number of nodes is not a valid integer: {0}.
        /// </summary>
        public static string HPCExcelCLI_InvalidNodes {
            get {
                return ResourceManager.GetString("HPCExcelCLI_InvalidNodes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ERROR: Invalid number of resources. Min = {0}, Max = {1}..
        /// </summary>
        public static string HPCExcelCLI_InvalidResources {
            get {
                return ResourceManager.GetString("HPCExcelCLI_InvalidResources", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ERROR: Number of sockets is not a valid integer: {0}.
        /// </summary>
        public static string HPCExcelCLI_InvalidSockets {
            get {
                return ResourceManager.GetString("HPCExcelCLI_InvalidSockets", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ERROR: Workbook path invalid: &apos;{0}&apos;.
        /// </summary>
        public static string HPCExcelCLI_InvalidWBPath {
            get {
                return ResourceManager.GetString("HPCExcelCLI_InvalidWBPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ERROR: Job template already set..
        /// </summary>
        public static string HPCExcelCLI_JobTemplateSet {
            get {
                return ResourceManager.GetString("HPCExcelCLI_JobTemplateSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ERROR: Local computation flag already set..
        /// </summary>
        public static string HPCExcelCLI_LocalFlagSet {
            get {
                return ResourceManager.GetString("HPCExcelCLI_LocalFlagSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error while running workbook: {0}.
        /// </summary>
        public static string HPCExcelCLI_LocalRunError {
            get {
                return ResourceManager.GetString("HPCExcelCLI_LocalRunError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ERROR: Multiple local workbooks specified: &apos;{0}&apos; and &apos;{1}&apos;.
        /// </summary>
        public static string HPCExcelCLI_MultipleLocal {
            get {
                return ResourceManager.GetString("HPCExcelCLI_MultipleLocal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ERROR: Multiple remote workbook paths specified: &apos;{0}&apos; and &apos;{1}&apos;.
        /// </summary>
        public static string HPCExcelCLI_MultipleRemote {
            get {
                return ResourceManager.GetString("HPCExcelCLI_MultipleRemote", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ERROR: Multiple save workbook paths specified: &apos;{0}&apos; and &apos;{1}&apos;.
        /// </summary>
        public static string HPCExcelCLI_MultipleSave {
            get {
                return ResourceManager.GetString("HPCExcelCLI_MultipleSave", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ERROR: No local workbook specified..
        /// </summary>
        public static string HPCExcelCLI_NoLocal {
            get {
                return ResourceManager.GetString("HPCExcelCLI_NoLocal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ERROR: Cannot deploy when no remote workbook specified..
        /// </summary>
        public static string HPCExcelCLI_NoRemote {
            get {
                return ResourceManager.GetString("HPCExcelCLI_NoRemote", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ERROR: No scheduler specified..
        /// </summary>
        public static string HPCExcelCLI_NoScheduler {
            get {
                return ResourceManager.GetString("HPCExcelCLI_NoScheduler", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error while opening HPC session: {0}.
        /// </summary>
        public static string HPCExcelCLI_OpenSessionError {
            get {
                return ResourceManager.GetString("HPCExcelCLI_OpenSessionError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error while opening workbook at {0} with Excel: {1}.
        /// </summary>
        public static string HPCExcelCLI_OpenWBError {
            get {
                return ResourceManager.GetString("HPCExcelCLI_OpenWBError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ERROR: Requested resources already set..
        /// </summary>
        public static string HPCExcelCLI_ResourcesSet {
            get {
                return ResourceManager.GetString("HPCExcelCLI_ResourcesSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Exception on response: {0}.
        /// </summary>
        public static string HPCExcelCLI_ResponseError {
            get {
                return ResourceManager.GetString("HPCExcelCLI_ResponseError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error while trying to save workbook as {0}: {1}.
        /// </summary>
        public static string HPCExcelCLI_SaveFailed {
            get {
                return ResourceManager.GetString("HPCExcelCLI_SaveFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ERROR: Scheduler name already set..
        /// </summary>
        public static string HPCExcelCLI_SchedulerSet {
            get {
                return ResourceManager.GetString("HPCExcelCLI_SchedulerSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Running {0} with session {1} on {2}..
        /// </summary>
        public static string HPCExcelCLI_SessionInfo {
            get {
                return ResourceManager.GetString("HPCExcelCLI_SessionInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ERROR: Unknown argument &apos;{0}&apos;.
        /// </summary>
        public static string HPCExcelCLI_UnknownArg {
            get {
                return ResourceManager.GetString("HPCExcelCLI_UnknownArg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Generic command-line interface for executing partition/execute/merge
        ///calculations within Microsoft Excel.
        ///
        ///HPCExcelCLI /localworkbook:path [/local:{true|false}] [/scheduler:name] 
        ///    [/jobtemplate:jobtemplate] [/numcores:min[-max]] 
        ///    [/deployworkbook:{true|false}] [/remoteworkbook:path]
        ///  
        ///  /localworkbook:path   Specifies the .xlsm file to open.
        ///
        ///  /local:{true|false}   Specifies local vs cluster computation. 
        ///                        Defaults to false (Cluster).
        ///
        ///  /scheduler:name       Spe [rest of string was truncated]&quot;;.
        /// </summary>
        public static string HPCExcelCLI_Usage {
            get {
                return ResourceManager.GetString("HPCExcelCLI_Usage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Byte array input to {0} cannot be deserialized..
        /// </summary>
        public static string HPCExcelServiceDeserializeFailed {
            get {
                return ResourceManager.GetString("HPCExcelServiceDeserializeFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Exception on node {0}.
        /// </summary>
        public static string HPCExcelServiceExceptionOnNode {
            get {
                return ResourceManager.GetString("HPCExcelServiceExceptionOnNode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Closing {0} service host..
        /// </summary>
        public static string HPCExcelServiceExiting {
            get {
                return ResourceManager.GetString("HPCExcelServiceExiting", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Excel resources freed during {0} event..
        /// </summary>
        public static string HPCExcelServiceResourcesFreed {
            get {
                return ResourceManager.GetString("HPCExcelServiceResourcesFreed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Result from macro {0} output cannot be serialized..
        /// </summary>
        public static string HPCExcelServiceSerializeFailed {
            get {
                return ResourceManager.GetString("HPCExcelServiceSerializeFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Environment variable {0} has not been set..
        /// </summary>
        public static string HPCExcelServiceWorkbookNotSet {
            get {
                return ResourceManager.GetString("HPCExcelServiceWorkbookNotSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The work item must contain thirty items or fewer to comply with the macro invocation API..
        /// </summary>
        public static string HPCExcelWorkItem_MaxSize {
            get {
                return ResourceManager.GetString("HPCExcelWorkItem_MaxSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Popup window &apos;{0}&apos; may be blocking job progress. Consider changing your workbook to remove this popup or configuring popup bashing to automatically dismiss it. Window Message: &apos;{1}&apos; Window Class: &apos;{2}.
        /// </summary>
        public static string PopupBasher_BlockingWindow {
            get {
                return ResourceManager.GetString("PopupBasher_BlockingWindow", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ExcelDriver found a target child window and performed the default action. Parent Window Name=&apos;{0}&apos;, Parent Window Class=&apos;{1}&apos;, Child Window Name=&apos;{2}&apos;, Child Window Class=&apos;{3}&apos;, Role=&apos;{4}&apos;.
        /// </summary>
        public static string PopupBasher_DefaultAction {
            get {
                return ResourceManager.GetString("PopupBasher_DefaultAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to enumerate open windows. Unable to monitor and/or bash popups..
        /// </summary>
        public static string PopupBasher_EnumWindowsFailed {
            get {
                return ResourceManager.GetString("PopupBasher_EnumWindowsFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unexpected exception while checking popups. {0}.
        /// </summary>
        public static string PopupBasher_Error {
            get {
                return ResourceManager.GetString("PopupBasher_Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to get properties of open window..
        /// </summary>
        public static string PopupBasher_ExamineWindowFailed {
            get {
                return ResourceManager.GetString("PopupBasher_ExamineWindowFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Found child window Name=&apos;{0}&apos;, Class=&apos;{1}&apos;, Role=&apos;{2}&apos;, Text=&apos;{3}&apos;.
        /// </summary>
        public static string PopupBasher_FoundChild {
            get {
                return ResourceManager.GetString("PopupBasher_FoundChild", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Found Parent Window &apos;{0}&apos;, Class=&apos;{1}&apos;.
        /// </summary>
        public static string PopupBasher_FoundParent {
            get {
                return ResourceManager.GetString("PopupBasher_FoundParent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Searching for child window Name=&apos;{0}&apos;, Class=&apos;{1}&apos;, Role=&apos;{2}&apos;.
        /// </summary>
        public static string PopupBasher_SearchingForChild {
            get {
                return ResourceManager.GetString("PopupBasher_SearchingForChild", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to analyze open windows. Unable to monitor and/or bash popups..
        /// </summary>
        public static string PopupBasher_TracePopupFailed {
            get {
                return ResourceManager.GetString("PopupBasher_TracePopupFailed", resourceCulture);
            }
        }
    }
}
